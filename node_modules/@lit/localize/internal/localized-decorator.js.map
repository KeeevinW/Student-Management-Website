{"version":3,"file":"localized-decorator.js","sourceRoot":"","sources":["../src/internal/localized-decorator.ts"],"names":[],"mappings":"AAAA;;;;GAIG;AAEH,OAAO,EAAC,uBAAuB,EAAC,MAAM,2BAA2B,CAAC;AA8BlE;;;;;;;;;;;;;;;;;;;;;;;GAuBG;AACH,MAAM,CAAC,MAAM,SAAS,GACpB,GAAuB,EAAE,CACzB,CACE,KAA2B,EAC3B,QAAsD,EACtD,EAAE;IACF,KAAK,CAAC,cAAc,CAAC,uBAAuB,CAAC,CAAC;IAC9C,OAAO,KAAK,CAAC;AACf,CAAC,CAAC","sourcesContent":["/**\n * @license\n * Copyright 2021 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */\n\nimport {updateWhenLocaleChanges} from './localized-controller.js';\n\nimport type {ReactiveControllerHost} from 'lit';\n\n/**\n * Generates a public interface type that removes private and protected fields.\n * This allows accepting otherwise incompatible versions of the type (e.g. from\n * multiple copies of the same package in `node_modules`).\n */\nexport type Interface<T> = {\n  [K in keyof T]: T[K];\n};\n\ntype ReactiveElementClass = {\n  addInitializer(initializer: (element: ReactiveControllerHost) => void): void;\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  new (...args: any[]): ReactiveControllerHost;\n};\n\nexport type LocalizedDecorator = {\n  // legacy\n  (cls: ReactiveElementClass): void;\n\n  // standard\n  (\n    target: ReactiveElementClass,\n    context: ClassDecoratorContext<ReactiveElementClass>\n  ): void;\n};\n\n/**\n * Class decorator to enable re-rendering the given LitElement whenever a new\n * active locale has loaded.\n *\n * See also {@link updateWhenLocaleChanges} for the same functionality without\n * the use of decorators.\n *\n * When using lit-localize in transform mode, applications of this decorator are\n * removed.\n *\n * Usage:\n *\n *   import {LitElement, html} from 'lit';\n *   import {customElement} from 'lit/decorators.js';\n *   import {msg, localized} from '@lit/localize';\n *\n *   @localized()\n *   @customElement('my-element')\n *   class MyElement extends LitElement {\n *     render() {\n *       return html`<b>${msg('Hello World')}</b>`;\n *     }\n *   }\n */\nexport const localized: Localized =\n  (): LocalizedDecorator =>\n  (\n    clazz: ReactiveElementClass,\n    _context?: ClassDecoratorContext<ReactiveElementClass>\n  ) => {\n    clazz.addInitializer(updateWhenLocaleChanges);\n    return clazz;\n  };\n\ntype Localized = (() => LocalizedDecorator) & {\n  // Used by the localize-tools transform to detect this decorator based\n  // on type.\n  _LIT_LOCALIZE_DECORATOR_?: never;\n};\n"]}