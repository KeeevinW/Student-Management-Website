{"version":3,"file":"runtime.js","sourceRoot":"","sources":["../src/init/runtime.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright 2021 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */\n\nimport {_installMsgImplementation} from '../lit-localize.js';\nimport {Deferred} from '../internal/deferred.js';\nimport {LOCALE_STATUS_EVENT} from '../internal/locale-status-event.js';\nimport {runtimeMsg} from '../internal/runtime-msg.js';\n\nimport type {LocaleStatusEventDetail} from '../internal/locale-status-event.js';\nimport type {\n  LocaleModule,\n  TemplateLike,\n  TemplateMap,\n  MsgFn,\n  MsgOptions,\n} from '../internal/types.js';\n\n/**\n * Configuration parameters for lit-localize when in runtime mode.\n */\nexport interface RuntimeConfiguration {\n  /**\n   * Required locale code in which source templates in this project are written,\n   * and the initial active locale.\n   */\n  sourceLocale: string;\n\n  /**\n   * Required locale codes that are supported by this project. Should not\n   * include the `sourceLocale` code.\n   */\n  targetLocales: Iterable<string>;\n\n  /**\n   * Required function that returns the localized templates for the given locale\n   * code.\n   *\n   * This function will only ever be called with a `locale` that is contained by\n   * `targetLocales`.\n   */\n  loadLocale: (locale: string) => Promise<LocaleModule>;\n}\n\n/**\n * Dispatch a \"lit-localize-status\" event to `window` with the given detail.\n */\nfunction dispatchStatusEvent(detail: LocaleStatusEventDetail) {\n  window.dispatchEvent(new CustomEvent(LOCALE_STATUS_EVENT, {detail}));\n}\n\nlet activeLocale = '';\nlet loadingLocale: string | undefined;\nlet sourceLocale: string | undefined;\nlet validLocales: Set<string> | undefined;\nlet loadLocale: ((locale: string) => Promise<LocaleModule>) | undefined;\nlet templates: TemplateMap | undefined;\nlet loading = new Deferred<void>();\n// The loading promise must be initially resolved, because that's what we should\n// return if the user immediately calls setLocale(sourceLocale).\nloading.resolve();\nlet requestId = 0;\n\n/**\n * Set configuration parameters for lit-localize when in runtime mode. Returns\n * an object with functions:\n *\n * - `getLocale`: Return the active locale code.\n * - `setLocale`: Set the active locale code.\n *\n * Throws if called more than once.\n */\nexport const configureLocalization: ((config: RuntimeConfiguration) => {\n  getLocale: typeof getLocale;\n  setLocale: typeof setLocale;\n}) & {\n  _LIT_LOCALIZE_CONFIGURE_LOCALIZATION_?: never;\n} = (config: RuntimeConfiguration) => {\n  _installMsgImplementation(((template: TemplateLike, options?: MsgOptions) =>\n    runtimeMsg(templates, template, options)) as MsgFn);\n  activeLocale = sourceLocale = config.sourceLocale;\n  validLocales = new Set(config.targetLocales);\n  validLocales.add(config.sourceLocale);\n  loadLocale = config.loadLocale;\n  return {getLocale, setLocale};\n};\n\n/**\n * Return the active locale code.\n */\nconst getLocale: (() => string) & {\n  _LIT_LOCALIZE_GET_LOCALE_?: never;\n} = () => {\n  return activeLocale;\n};\n\n/**\n * Set the active locale code, and begin loading templates for that locale using\n * the `loadLocale` function that was passed to `configureLocalization`. Returns\n * a promise that resolves when the next locale is ready to be rendered.\n *\n * Note that if a second call to `setLocale` is made while the first requested\n * locale is still loading, then the second call takes precedence, and the\n * promise returned from the first call will resolve when second locale is\n * ready. If you need to know whether a particular locale was loaded, check\n * `getLocale` after the promise resolves.\n *\n * Throws if the given locale is not contained by the configured `sourceLocale`\n * or `targetLocales`.\n */\nconst setLocale: ((newLocale: string) => Promise<void>) & {\n  _LIT_LOCALIZE_SET_LOCALE_?: never;\n} = (newLocale: string) => {\n  if (newLocale === (loadingLocale ?? activeLocale)) {\n    return loading.promise;\n  }\n  if (!validLocales || !loadLocale) {\n    throw new Error('Internal error');\n  }\n  if (!validLocales.has(newLocale)) {\n    throw new Error('Invalid locale code');\n  }\n  requestId++;\n  const thisRequestId = requestId;\n  loadingLocale = newLocale;\n  if (loading.settled) {\n    loading = new Deferred();\n  }\n  dispatchStatusEvent({status: 'loading', loadingLocale: newLocale});\n  const localePromise: Promise<Partial<LocaleModule>> =\n    newLocale === sourceLocale\n      ? // We could switch to the source locale synchronously, but we prefer to\n        // queue it on a microtask so that switching locales is consistently\n        // asynchronous.\n        Promise.resolve({templates: undefined})\n      : loadLocale(newLocale);\n  localePromise.then(\n    (mod) => {\n      if (requestId === thisRequestId) {\n        activeLocale = newLocale;\n        loadingLocale = undefined;\n        templates = mod.templates;\n        dispatchStatusEvent({status: 'ready', readyLocale: newLocale});\n        loading.resolve();\n      }\n      // Else another locale was requested in the meantime. Don't resolve or\n      // reject, because the newer load call is going to use the same promise.\n      // Note the user can call getLocale() after the promise resolves if they\n      // need to check if the locale is still the one they expected to load.\n    },\n    (err) => {\n      if (requestId === thisRequestId) {\n        dispatchStatusEvent({\n          status: 'error',\n          errorLocale: newLocale,\n          errorMessage: err.toString(),\n        });\n        loading.reject(err);\n      }\n    }\n  );\n  return loading.promise;\n};\n"]}