{"version":3,"file":"localized-controller.js","sourceRoot":"","sources":["../src/internal/localized-controller.ts"],"names":[],"mappings":"AAAA;;;;GAIG;AAEH,OAAO,EAAC,mBAAmB,EAAC,MAAM,0BAA0B,CAAC;AAI7D,MAAM,kBAAkB;IAGtB,YAAY,IAA4B;QAIvB,8BAAyB,GAAG,CAC3C,KAAiD,EACjD,EAAE;YACF,IAAI,KAAK,CAAC,MAAM,CAAC,MAAM,KAAK,OAAO,EAAE;gBACnC,IAAI,CAAC,IAAI,CAAC,aAAa,EAAE,CAAC;aAC3B;QACH,CAAC,CAAC;QATA,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;IACnB,CAAC;IAUD,aAAa;QACX,MAAM,CAAC,gBAAgB,CACrB,mBAAmB,EACnB,IAAI,CAAC,yBAAyB,CAC/B,CAAC;IACJ,CAAC;IAED,gBAAgB;QACd,MAAM,CAAC,mBAAmB,CACxB,mBAAmB,EACnB,IAAI,CAAC,yBAAyB,CAC/B,CAAC;IACJ,CAAC;CACF;AAED;;;;;;;;;;;;;;;;;;;;;;;GAuBG;AACH,MAAM,wBAAwB,GAAG,CAAC,IAA4B,EAAE,EAAE,CAChE,IAAI,CAAC,aAAa,CAAC,IAAI,kBAAkB,CAAC,IAAI,CAAC,CAAC,CAAC;AAEnD,MAAM,CAAC,MAAM,uBAAuB,GAEhC,wBAAwB,CAAC","sourcesContent":["/**\n * @license\n * Copyright 2021 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */\n\nimport {LOCALE_STATUS_EVENT} from './locale-status-event.js';\n\nimport type {ReactiveController, ReactiveControllerHost} from 'lit';\n\nclass LocalizeController implements ReactiveController {\n  host: ReactiveControllerHost;\n\n  constructor(host: ReactiveControllerHost) {\n    this.host = host;\n  }\n\n  private readonly __litLocalizeEventHandler = (\n    event: WindowEventMap[typeof LOCALE_STATUS_EVENT]\n  ) => {\n    if (event.detail.status === 'ready') {\n      this.host.requestUpdate();\n    }\n  };\n\n  hostConnected() {\n    window.addEventListener(\n      LOCALE_STATUS_EVENT,\n      this.__litLocalizeEventHandler\n    );\n  }\n\n  hostDisconnected() {\n    window.removeEventListener(\n      LOCALE_STATUS_EVENT,\n      this.__litLocalizeEventHandler\n    );\n  }\n}\n\n/**\n * Re-render the given LitElement whenever a new active locale has loaded.\n *\n * See also {@link localized} for the same functionality as a decorator.\n *\n * When using lit-localize in transform mode, calls to this function are\n * replaced with undefined.\n *\n * Usage:\n *\n *   import {LitElement, html} from 'lit';\n *   import {msg, updateWhenLocaleChanges} from '@lit/localize';\n *\n *   class MyElement extends LitElement {\n *     constructor() {\n *       super();\n *       updateWhenLocaleChanges(this);\n *     }\n *\n *     render() {\n *       return html`<b>${msg('Hello World')}</b>`;\n *     }\n *   }\n */\nconst _updateWhenLocaleChanges = (host: ReactiveControllerHost) =>\n  host.addController(new LocalizeController(host));\n\nexport const updateWhenLocaleChanges: typeof _updateWhenLocaleChanges & {\n  _LIT_LOCALIZE_CONTROLLER_FN_?: never;\n} = _updateWhenLocaleChanges;\n"]}